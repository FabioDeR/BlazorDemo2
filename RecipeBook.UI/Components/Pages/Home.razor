@page "/"
@using RecipeBook.UI.Components.Pages.DemoContainer
@using System.Linq.Dynamic.Core
@using RecipeBook.UI.Components.Shared.Store
@inject EmployeeState state
@inject DispatcherEmployee dispatch


<RadzenDataGrid @ref="grid" AllowFiltering="true" RowRender="@RowRender" LoadData="@LoadData" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@state.Employees" ColumnWidth="300px" Count="@count" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Multiple">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(Employee.EmployeeID)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Property="@nameof(Employee.FirstName)" Title="First Name" Frozen="true" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(Employee.LastName)" Title="Last Name" Width="160px" />

    </Columns>
    <Template Context="data">
        <div>
            Je suis toujours ouvert
        </div>
    </Template>
</RadzenDataGrid>
<RadzenButton Click=@(() => dispatch.Dispatch(new ReloadEmployee())) Text="Add New" Icon="add_circle" ButtonStyle="ButtonStyle.Primary" />


@code {
    RadzenDataGrid<Employee> grid;
    int count;
    bool isLoading;
    protected override async Task OnInitializedAsync()
    {
        await dispatch.Dispatch(new LoadingEmployee());

        await base.OnInitializedAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await grid.ExpandRows(grid.PagedView);
        }

    }

    void RowRender(RowRenderEventArgs<Employee> args)
    {
        args.Expandable = false;
    }


    public class Employee
    {
        public int EmployeeID { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }

    }



    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();


        var query = state.Employees.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            // Filter via the Where method
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            // Sort via the OrderBy method
            query = query.OrderBy(args.OrderBy);
        }

        // Important!!! Make sure the Count property of RadzenDataGrid is set.
        count = query.Count();
        // Perform paging via Skip and Take.
        state.Employees = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
        isLoading = false;
    }

    protected override void OnInitialized()
    {
        state.OnChange += StateHasChanged; // S'abonner aux changements d'état
    }

    public void Dispose()
    {
        state.OnChange -= StateHasChanged; // Se désabonner pour éviter les fuites de mémoire
    }
}

